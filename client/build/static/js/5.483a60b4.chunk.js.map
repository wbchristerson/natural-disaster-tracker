{"version":3,"sources":["views/added-pages/AddDisaster.js"],"names":["AddDisaster","props","state","informalName","officialName","disasterType","DISASTER_TYPES","isOngoing","latitude","longitude","isValidInformalName","isValidOfficialName","isValidDisasterType","isValidLatitude","isValidLongitude","isModalOpen","authorizationFailure","showToast","backEndHost","getBackEndHost","frontEndHost","getFrontEndHost","evt","this","setState","target","value","isValidGeographicCoordinate","fetch","method","body","JSON","stringify","informal_name","official_name","disaster_type","is_ongoing","location_latitude","location_longitude","contentType","headers","getCookieWithKey","USER_ACCESS_TOKEN_KEY","then","data","status","statusText","catch","error","console","log","xs","className","getAdminPrivilegeWarningMessage","action","encType","row","md","htmlFor","id","name","placeholder","onChange","onInformalNameChange","bind","invalid","onOfficialNameChange","custom","onDisasterTypeChange","map","disaster","tag","sm","color","shape","checked","onIsOngoingChange","onLatitudeChange","onLongitudeChange","type","size","onClick","onSubmit","resetDisasterForm","show","onClose","onModalClose","closeButton","getAdminPrivilegeErrorMessage","position","autohide","fade","React","Component"],"mappings":"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","file":"static/js/5.483a60b4.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormGroup,\n  CFormText,\n  CInput,\n  CLabel,\n  CSelect,\n  CRow,\n  CSwitch,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CToast,\n  CToastHeader,\n  CToastBody,\n  CToaster,\n  CInvalidFeedback,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { getCookieWithKey, USER_ACCESS_TOKEN_KEY, getBackEndHost, getFrontEndHost, DISASTER_TYPES, getAdminPrivilegeErrorMessage, \n  getAdminPrivilegeWarningMessage, isValidGeographicCoordinate } from 'src/Utilities';\n\n\nclass AddDisaster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      informalName: \"\",\n      officialName: \"\",\n      disasterType: DISASTER_TYPES[0],\n      isOngoing: false,\n      latitude: \"\",\n      longitude: \"\",\n\n      isValidInformalName: true,\n      isValidOfficialName: true,\n      isValidDisasterType: true,\n      isValidLatitude: true,\n      isValidLongitude: true,\n      \n      isModalOpen: false,\n      authorizationFailure: null, // an error code, either 401, 403, or null\n      showToast: false,\n    };\n    this.backEndHost = getBackEndHost();\n    this.frontEndHost = getFrontEndHost();\n  }\n\n  onInformalNameChange(evt) {\n    this.setState({ informalName: evt.target.value });\n  }\n\n  onOfficialNameChange(evt) {\n    this.setState({ officialName: evt.target.value });\n  }\n\n  onDisasterTypeChange(evt) {\n    this.setState({ disasterType: evt.target.value });\n  }\n\n  onIsOngoingChange(evt) {\n    this.setState({ isOngoing: !this.state.isOngoing });\n  }\n\n  onLatitudeChange(evt) {\n    this.setState({ latitude: evt.target.value });\n  }\n\n  onLongitudeChange(evt) {\n    this.setState({ longitude: evt.target.value });\n  }\n\n  onSubmit() {\n    let\n      isValidInformalName = true,\n      isValidOfficialName = true,\n      isValidDisasterType = true,\n      isValidLatitude = true,\n      isValidLongitude = true;\n\n    const {informalName, officialName, disasterType, isOngoing, latitude,\n      longitude} = this.state;\n\n    if (informalName === \"\") {\n      isValidInformalName = false;\n    }\n\n    if (officialName === \"\") {\n      isValidOfficialName = false;\n    }\n\n    if (disasterType === \"Please select\") {\n      isValidDisasterType = false;\n    }\n\n    if (!isValidGeographicCoordinate(latitude)) {\n      isValidLatitude = false;\n    }\n\n    if (!isValidGeographicCoordinate(longitude)) {\n      isValidLongitude = false;\n    }\n\n    if (isValidInformalName && isValidOfficialName && isValidDisasterType &&\n      isValidLatitude && isValidLongitude) {\n\n      this.setState({\n        showToast: false,\n      });\n      \n      fetch(`${this.backEndHost}/api/disasters`,\n        {\n          method: 'POST',\n          body: JSON.stringify({\n            informal_name: informalName,\n            official_name: officialName,\n            disaster_type: disasterType,\n            is_ongoing: isOngoing,\n            location_latitude: latitude,\n            location_longitude: longitude,\n          }),\n          contentType: 'application/json',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + getCookieWithKey(USER_ACCESS_TOKEN_KEY),\n          }\n        }\n      )\n      .then(data => {\n        if ((data.status === 401 && data.statusText === \"UNAUTHORIZED\") || (data.status === 403 && data.statusText === \"FORBIDDEN\")) {\n          this.setState({\n            isModalOpen: true,\n            authorizationFailure: data.status,\n          });\n        } else if (data.status === 200) {\n          this.setState({\n            showToast: true,\n          });\n        }\n      })\n      .catch(error => console.log(\"error!!!: \", error)); \n    }\n\n    this.setState({\n      isValidInformalName,\n      isValidOfficialName,\n      isValidDisasterType,\n      isValidLatitude,\n      isValidLongitude,\n    });\n  }\n\n\n  resetDisasterForm() {\n    this.setState({\n      informalName: \"\",\n      officialName: \"\",\n      disasterType: \"\",\n      isOngoing: false,\n      latitude: \"\",\n      longitude: \"\",\n\n      isValidInformalName: true,\n      isValidOfficialName: true,\n      isValidDisasterType: true,\n      isValidLatitude: true,\n      isValidLongitude: true,\n    });\n  }\n\n\n  onModalClose() {\n    this.setState({\n      isModalOpen: false,\n      authorizationFailure: null,\n    });\n  }\n\n\n  render() {\n    const {isModalOpen, authorizationFailure, showToast, informalName,\n      isValidInformalName, isValidOfficialName, isValidDisasterType,\n      isValidLatitude, isValidLongitude, isOngoing, disasterType, officialName, latitude, longitude} = this.state;\n    return (\n      <>\n        <CRow>\n          <CCol xs=\"12\">\n            <CCard>\n              <CCardHeader>\n                <h4>Add Disaster Listing</h4>\n                <div className=\"top-information-text\">{getAdminPrivilegeWarningMessage(\"add disaster listings\")}</div>\n              </CCardHeader>\n              <CCardBody>\n                \n                <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"informal-name-input\">Informal Name</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      {isValidInformalName && <CInput id=\"informal-name-input\" name=\"informal-name-input\" placeholder=\"Text\" value={informalName} onChange={this.onInformalNameChange.bind(this)}/>}\n                      {!isValidInformalName && <CInput id=\"informal-name-input\" invalid name=\"informal-name-input\" placeholder=\"Text\" value={informalName} onChange={this.onInformalNameChange.bind(this)}/>}\n                      <CInvalidFeedback>Informal name is blank or format is not recognized</CInvalidFeedback>\n                      <CFormText>The colloquial name of the disaster</CFormText>\n                    </CCol>\n                  </CFormGroup>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"official-name-input\">Official Name</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      {isValidOfficialName && <CInput id=\"official-name-input\" name=\"official-name-input\" placeholder=\"Text\" value={officialName} onChange={this.onOfficialNameChange.bind(this)}/>}\n                      {!isValidOfficialName && <CInput id=\"official-name-input\" invalid name=\"official-name-input\" placeholder=\"Text\" value={officialName} onChange={this.onOfficialNameChange.bind(this)}/>}\n                      <CInvalidFeedback>Official name is blank or format is not recognized</CInvalidFeedback>\n                      <CFormText>The identifying name of the disaster</CFormText>\n                    </CCol>\n                  </CFormGroup>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"select\">Disaster Type</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      {isValidDisasterType &&\n                        <CSelect custom name=\"select\" id=\"select\" value={disasterType} onChange={this.onDisasterTypeChange.bind(this)}>\n                          {DISASTER_TYPES.map(disaster => <option key={disaster} value={disaster}>{disaster}</option>)}\n                        </CSelect>\n                      }\n                      {!isValidDisasterType &&\n                        <CSelect invalid custom name=\"select\" id=\"select\" value={disasterType} onChange={this.onDisasterTypeChange.bind(this)}>\n                          {DISASTER_TYPES.map(disaster => <option key={disaster} value={disaster}>{disaster}</option>)}\n                        </CSelect>\n                      }\n                      <CInvalidFeedback>No disaster type is selected</CInvalidFeedback>\n                    </CCol>\n                  </CFormGroup>\n                  <CFormGroup row>\n                    <CCol tag=\"label\" sm=\"3\" className=\"col-form-label\">\n                      Disaster Ongoing\n                    </CCol>\n                    <CCol sm=\"1\">\n                      <CSwitch\n                        id=\"add-disaster-ongoing-switch\"\n                        className=\"mr-1\"\n                        color=\"danger\"\n                        // defaultChecked\n                        shape=\"pill\"\n                        checked={isOngoing}\n                        onChange={this.onIsOngoingChange.bind(this)}\n                      />\n                    </CCol>\n                    <CCol sm=\"3\">\n                      <CLabel htmlFor=\"add-disaster-ongoing-switch\">{isOngoing ? \"Yes\" : \"No\"}</CLabel>\n                    </CCol>\n                  </CFormGroup>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"email-input\">Latitude</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                    {isValidLatitude && <CInput id=\"latitude-input\" name=\"latitude-input\" placeholder=\"Disaster Latitude\" value={latitude} onChange={this.onLatitudeChange.bind(this)}/>}\n                      {!isValidLatitude && <CInput invalid id=\"latitude-input\" name=\"latitude-input\" placeholder=\"Disaster Latitude\" value={latitude} onChange={this.onLatitudeChange.bind(this)}/>}\n                      <CInvalidFeedback>Provided latitude is blank or format is not recognized</CInvalidFeedback>\n                      <CFormText className=\"help-block\">The latitude of the disaster</CFormText>\n                    </CCol>\n                  </CFormGroup>\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"email-input\">Longitude</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      {isValidLongitude && <CInput name=\"longitude-input\" placeholder=\"Disaster Latitude\" value={longitude} onChange={this.onLongitudeChange.bind(this)}/>}\n                      {!isValidLongitude && <CInput invalid id=\"longitude-input\" name=\"longitude-input\" placeholder=\"Disaster Latitude\" value={longitude} onChange={this.onLongitudeChange.bind(this)}/>}\n                      <CInvalidFeedback>Provided longitude is blank or format is not recognized</CInvalidFeedback>\n                      <CFormText className=\"help-block\">The longitude of the disaster</CFormText>\n                    </CCol>\n                  </CFormGroup>\n                </CForm>\n              </CCardBody>\n              <CCardFooter>\n                <CButton type=\"submit\" size=\"sm\" color=\"primary\" onClick={this.onSubmit.bind(this)}><CIcon name=\"cil-scrubber\" /> Submit</CButton>\n                <CButton type=\"reset\" size=\"sm\" color=\"danger\" onClick={this.resetDisasterForm.bind(this)}><CIcon name=\"cil-ban\" /> Reset</CButton>\n              </CCardFooter>\n            </CCard>\n          </CCol>\n        </CRow>\n        <CModal show={isModalOpen} onClose={this.onModalClose.bind(this)}>\n          <CModalHeader closeButton>\n            <CModalTitle>Failure To Create Disaster Listing</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            {getAdminPrivilegeErrorMessage(\"add disaster listings\", authorizationFailure)}\n          </CModalBody>\n          <CModalFooter>\n            <CButton \n              color=\"secondary\" \n              onClick={() => this.onModalClose()}\n            >OK</CButton>\n          </CModalFooter>\n        </CModal>\n        \n        <CToaster\n          position={'top-center'}\n          key={'toaster-top-center'}\n        >\n          <CToast\n            key={'toast'}\n            show={showToast}\n            autohide={5000}\n            fade={true}\n          >\n            <CToastHeader closeButton={true}>\n              Disaster Listing Added\n            </CToastHeader>\n            <CToastBody>\n              {`The disaster listing for ${informalName} has been added successfully!`}\n            </CToastBody>\n          </CToast>\n        </CToaster>\n      </>\n    );\n  }\n}\n\nexport default AddDisaster;"],"sourceRoot":""}